Génie logiciel: c'est un domaine qui est abstrait + complexe
ce n'est juste le déveoppeur mais 
l'injection de dépendance : Spring (java)
Notre logiciel sont fermé de la modification et ouvert  extensiblité

les points clé de la qualité d'un logiciel sont:
la validité 
la fiabilité
la robutesse
l'extensibilité
la réutilisabilité
la compatibilité
l'efficacité : design pattern => singleton => création une seule instance 
la portabilité
l'intégrité
la facilité d'utilisation + d'entretien

les raisons non qualité d'un logiciel : facteur de l'être humain

Cycle de vie d'un logiciel Etape 1 : Définitions des besoins  (cahier des charges)
Cycle de vie d'un logiciel Etape 2 : Analyse des besoins / Spécification (uml - modélisation)
Cycle de vie d'un logiciel Etape 3 : Codage et tests unitaires (le codage  +le test)
Cycle de vie d'un logiciel Etape 4 : Vérification et validation (Intégration des modules et vérification finale , la sortie de la première version)
Cycle de vie d'un logiciel Etape 5 : Maintenance (corrective - adaptive - évolutive) ===> autres versions du logiciel

Modéles de cycle de vie d'un logiciel
Le cycle de vie en cascade
Le cycle de vie en V
Le cycle de vie guidé par prototype
Le cycle de vie incrémental
Le cycle de vie en spiral (itératif)

Principes de génie logiciel 
1 - la spération des responsabilités
2 - la réutilisations
3 - Encapsulation maximale
le rôle de l'orienté object : polymorphisme (réutilisation de la même nom (méthode) autant fois avec la possibilité d'avoir des paramétres différentes + 
type de retour différents) -  l'héritage 
python est un langage qui est simple, il change la morphologie donc c'est le polymorphisme par défaut dans python
4 - Couplage faible (fermé à l'extension ouvert à la modification) l'injection de dépendance 

_____________________________________________________________


2 Uml 
Vue fonctionnelle (Use case)
Vue statique (class d'analyse ou de conception)
Vue dynamique

Diagramme des Use-case: 1 les acteurs du système
			2 les cas d'utilisation 
			(Les acteurs incluent : les utilisateurs humains, les autres systèmes informatiques qui vont communiquer avec le système)
			(trois types de relations : généralisation /spécification(héritage) - incluse - extends) peut être étandu par ... 
			inluant vers l'inclu (l'authentification)
			3 


_________________________
séance 2 : 
Méthodes dépandante de la classe
méthodes ou attributs 

+ public 
protégé
- privé
in java we have another type : package freindly 

$ ou soulignement pour les attributs static
les membres d'une classe

l'encapsulation

une relation d'agregation faible : est une relation faible (est composé par)
une relation d'héritage : est une sorte de  (spécialisation et généralisation)
une relation d'association : deux classe génére une troisième association
une relation d'agregation forte : est une relation forte

les ca
orm exemples:  hybernate / spring 
lié les classs avec les tables
la couche persistances  

plusieurs à plusieres =====> class d'association
Attribut de l'objet

_______________________
Série d’exercices N°2 : Diagramme de Classe et Diagramme d’objet :
Exercice d’application :
a)- Instanciation (roger est une instance d'un restaurateur)
b)- Association puis instanciation
c)- Héritage (pérsonalisation - spécialisation)
d)- Instanciation
e)- Agragation
f)- Généralisation
g)- Instanciation puis association
h)- Attribution
i)- Héritage (Spécialisation)
j)- Héritage (Généralistion)
k)- Attribution
l)- Association
m)- Attribution

EXERCICE DEVELOPPEUR :
Q3 : Equipe(logo : int ; mesDeveloppeurs : List ; mesOrdinateurs : List ; monEntreprise : Entreprise ; creerMesDeveloppeurs(): void)
Developpeur (monOdrdinateur : Ordinateur ; monEquipe : Equipe ; Réfléchir() : void)
Spécifieur (dialoguerAvecUtiliasteur() void)
Entreprise(mesEquipes : List ; mesOrdinateurs : List)
Ordinateur(monDeveloppeur:Developpeur)




